$rules = {
    '..###' => '.',
    '.##.#' => '#',
    '#..#.' => '.',
    '#.#.#' => '#',
    '###..' => '#',
    '.#..#' => '.',
    '##..#' => '#',
    '.###.' => '#',
    '..#..' => '.',
    '.....' => '.',
    '#####' => '.',
    '.#...' => '#',
    '...#.' => '#',
    '#...#' => '#',
    '####.' => '.',
    '.####' => '.',
    '##.##' => '#',
    '...##' => '.',
    '..##.' => '.',
    '#.##.' => '.',
    '#....' => '.',
    '.#.#.' => '.',
    '..#.#' => '#',
    '#.#..' => '#',
    '##...' => '#',
    '##.#.' => '.',
    '#..##' => '.',
    '.##..' => '.',
    '#.###' => '.',
    '....#' => '.',
    '.#.##' => '#',
    '###.#' => '#'
}

$pots = ("."*30) +  "..#..###...#####.#.#...####.#..####..###.##.#.#.##.#....#....#.####...#....###.###..##.#....#######" + ("."*30)
$first_index = $pots.index('#')

(1..20).each do |gen|
    gen_pots = ".."

    $pots.split(//).each_cons(5) do |five|
        gen_pots << $rules[five.join]
    end

    $pots = gen_pots + ("...")

    value = (0 ... $pots.length).find_all { |i| $pots[i] == '#' }.map {|v| v - $first_index+2}.reduce(0,:+)
    puts "#{$pots} (#{gen}) value = #{value}"
end